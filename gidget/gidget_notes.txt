----------------------------------------------------
BigPipe:
----------------------------------------------------
Traditional model does not allow for overlapping between browser processing and server processing.
BigPipe allows speeding up page rendering times by loading the page in small parts called pagelets.
This allows the browser to start rendering the page while the server is still processing the rest of the content.
This allows traditional page rendering to follow a pipelining or parallelizing approach.
So from the user's perspective the page becomes visible sooner, and the rest is rendered progressively, 
perceived latency is reduced the effective TTI is reduced.
From the server side, can be considered single flush vs incremental flush model.
Changes are more evident on old browsers, slow networks and cold caches.
Another way of looking at this is downloading and rendering is broken up into multiple stages, 
so progressive rendering can happen.

steps:
 - browser requests page from server
 - server quickly renders a page skeleton containing the <head> tag and a <body> tag with <div> elements as placeholders for the pagelets
   (<body> is not closed, so HTTP connection is still open as the page is not yet finished)
 - bigpipe.js is in the <head> tag, so browser downloads it, and then start rendering the page
 - server is rendering the rest of the page, one pagelet at a time. 
   each pagelet is flushed and sent to the browser inside a <script>BigPipe.onArrive(...)</script> snippet.
   snippet is a JSON object containing all the css, js resources, html, metadat required for that pagelet
   eg. <script>bigpipe.onPageletArrive({id:id1,content:<div></div>,css:[...],js:[...]})</script>
 - browser bigpipe.js sees the onPageletArrive, downloads it's css if any, then injects the html into the corresponding div innerHTML
 - js is always lower priority that css and html, so after all pagelets have been recvd and rendered, 
   the browser starts to asynchronously download all external js files needed by the pagelets
 - downloaded js can now be executed in any order as they arrive, as they only affect their specific pagelet.

result should be several pagelets executing simultaneously in different stages

time components:
- Network time - between browser and server. 
   dependent on network
   could reduce by reducing bytes (cookies,html,css, js, images)
   facilitate caching?
- Generation time - webserver request to response.
   improve backend code
- Render time - 
    dependent on client machine and browser
    reduce bytes that need to be processed
    execute js after showing page to user.

TTI (time to interact) is a measure of how long the user has to wait before there is something on 
 the page that they can see and start working with.


HTML5 specifies that a <script> tag inserted via innerHTML should not execute.

In HTML5, you can tell browser when to run your JavaScript code. There are 3 possibilities:
(best explanation http://www.growingwiththeweb.com/2014/02/async-vs-defer-attributes.html)
note: defer not supported by <=IE9
note: defer may not be well supported, in markup vs dynamic (https://github.com/h5bp/lazyweb-requests/issues/42)
Normal: <script src="file.js"></script>
Use async attribute: <script async src="file.js"></script>
Use defer attribute: <script defer src="file.js"></script>
Without async or defer, browser will run your script immediately, before rendering the elements that's below your script tag.
With async (asynchronous), browser will continue to load the HTML page and render it while the browser load and execute the script at the same time.
With defer, browser will run your script when the page finished parsing. (not necessary finishing downloading all image files. This is good.)
Note: there's no “=true” or “=false” after async or defer.
As of 2013-07-11, all major browser's latest public versions support async
for older browsers that do not support async:
  var ele = document.createElement("script");
  ele.src = "xyz.js";
  document.body.appendChild(ele);




http://ajaxpatterns.org/On-Demand_Javascript (JavaScript being pulled from the server after the page has loaded)
https://www.facebook.com/notes/facebook-engineering/bigpipe-pipelining-web-pages-for-high-performance/389414033919
see http://stevesouders.com/hpws/rules.php 14 Rules for Faster-Loading Web Sites
https://github.com/orygens/bigpipe-js
https://github.com/garo/bigpipe
https://www.safaribooksonline.com/library/view/high-performance-javascript/9781449382308/ch01.html
http://www.html5rocks.com/en/tutorials/speed/script-loading/ (very good)


promises related:
 - https://msdn.microsoft.com/en-us/magazine/gg723713.aspx
 - http://tutorials.jenkov.com/jquery/deferred-objects.html (very good)


steps:
------
 - fragments can expect to be executed within a shared context, so needs to have a unique namespace
   come up with a naming scheme
 - unique namespace for the html (particuarly when using id's)
 - unique variable names for the globally exposed js
 - each fragment should have all its js in an external file
 - external js should be self executing

 
 - everything is a fragment, so even standalone will be executed as a single in a container page
   - they can expect certain globals js (jQUery, gidget) , css (bootstrap) to be always provided
   - anything other js they need, should be added at end of the fragment
   - non-global js can be repeated in tehe fragments, gidget will take care of loading them only once
 - need a way of passing in fragment info to the container page
 - need a way of passing in layout info for the fragments, to the container page
   - layout is optional, if not passed in, will just layout as a stack
   - else can use bootstrap layout ?
 
 - compositing, so need to be resilient and handle fragment failure, failure tolerant
 - don't think in terms of dependencies, think in terms of shared state (scope in angular?)
 - don't let failure cascade

to investigate:
---------------
 - how to load without running embedded external scripts. 
   (not if you use jquery to insert, have to pull raw response AND do a non-jQuery insert)
   
 - how to not reload/execute scripts that have already been loaded (require.js?)
 
 - dependencies between scripts
 
 - does external css in the fragments have to be manually loaded
 
 - do we have to worry about repeated css loading
 
 - fragment security, should not be able to bypass, because calling from browser
 
 - be able to request js files from radar through interceptas 
 
 - does angular have support for this async loading/executing
  
 - retry failed html downloads

 - retry failed script downloads

 - layout of fragments through frontend
 
 - layout support
     - if none passed in, use bootstrap spec?


composite.html
standalone.html
f1.html
f2.html
js/
 gidget.js
 common0.js
 common1.js
 common2.js
 f1.js
 f2.js
css/
 common1.css
 common2.css
 f1.css
 f2.css


outline:
--------
prep:
  - get fragment ids
  - get fragment urls
  - generate fragment placeholders
htmls:
  - perform async parallel load of fragment htmls into their placeholders
  - keep track of succesfully loaded fragments
scripts:
  - create scriptsCollection
    - scriptsCollection is a set
    - scan base container and add to scriptsCollection
    - for each successfully loaded fragment
       - scan fragment and add to scriptsCollection
  - for each script in scriptsCollection
    - load and execute
 
  
 









