

CONCEPTS: 

Working Tree: is the project directory where edits are done
Bare Repository: is the structure that holds the project files and describes the repo, on a central remote server. 
  edits are NOT done on bare repos. bare repos do NOT have working trees.
Remote: is what the bare repository is called.
Local Repository: is connected to a remote central bare repo.
Cloning: is how a local repo creates a working tree of a repo on a remote.
Origin: local repo calls the remote it was cloned from "origin", by convention.
Branch: structure that stores a series of commits in a repo. 
  branch is also a pointer to the latest commit on that branch?
Local Branch: a branch that exists on a repo.
  remote repos can have local branches, but these CANNOT be worked on directly.
  local repos can have local branches, which have working trees (which allow them to be worked on directly).
  local repos can have local branches that just exist on the local repo.
  local repos can also have remote branches.
Remote Branch: a local branch on a local repo that is matched to a local branch on a remote repo.
Tracking Branch: the local branch on a local repo that is matched to the local branch on the remote repo.
Tracked Branch: the local branch on the remote that the local branch on the local repo is matched with.

Commit: takes a snapshot of the current state of the staged working tree

Index: staging area where changes to the working tree are collected, prior to being committed.
Untracked: git does not know aout these files, they have never been added.
Tracked: git knows about these files, they have been added at some point.
Staged: this is a tracked file that has been modified and added to the index, but not yet committed from the index.
Modified: this is a tracked file that has been changed since the last time it was staged.
Unmodified: this is a tracked file that has not been changed, since the last time it was committed.

HEAD
head: a pointer to a commit that is the last commit on it's branch, and is not the parent of any other commit


Fast-forward Merge: if the tracked branch is ahead of the tracking branch, and the tracking branch has no commits that are not in the tracked branch


HOWTO: create a bare repository, to host a remote yourself
 created using $ git init --bare
 see http://www.thehorrors.org.uk/snippets/git-local-filesystem-remotes/
 
HOWTO: create a local repository from an existing remote repository
  use $ git init or $ git clone to get a working tree from a bare repo
 
HOWTO: authenticate with github
can authenticate with github using:
 - username/password: this would be if you cloned using the https
 - ssh: see how to setup for using this method.
for password-less ssh connections to github
 - added contents of ~/.ssh/id_dsa.pub to ssh keys from github settings
 - test with ssh -T git@github.com
 - see remotes using git remote -v
 - to change to ssh git, from https
  git remote set-url origin git@github.com:pbxrshd/scratch.git 
 
HOWTO: set up the git config 
  git stores configuration variables that control all aspects of how Git looks and operates. 
  These variables can be stored in three different places:
    /etc/gitconfig file: Contains values for every user on the system and all their repositories. If you pass the option --system to git config, it reads and writes from this file specifically.
    ~/.gitconfig or ~/.config/git/config file: Specific to your user. You can make Git read and write to this file specifically by passing the --global option.
    config file in the Git directory (that is, .git/config) of whatever repository you’re currently using: Specific to that single repository.
  Each level overrides values in the previous level, so values in .git/config trump those in /etc/gitconfig.
  You may see keys more than once, because Git reads the same key from different files 
  (/etc/gitconfig and ~/.gitconfig, for example). In this case, Git uses the last 
  value for each unique key it sees.
  $ git config user.name check what Git thinks a specific key’s value is by typing git config <key>:
  $ git config --list command to list all the settings Git can find at that point
  $ git config --global user.name "John Doe"
  $ git config --global user.email johndoe@example.com
  If you want to override this with a different name or e-mail address for specific projects, 
  you can run the command without the --global option when you’re in that project.

HOWTO: get information about the remote and it's relation to local
  to show information for a remote called "origin"
  $ git show remote origin 
  this should:
    show the urls (https or ssh)
    local remotes and if they are already tracked, and new remotes that aren't tracked yet
    the local and remote branches "pull" and "push" will operate on
  
HOWTO: create a git repo from an existing project that is not under source control
  go to the root directory of the project
  $ git init # this creates the necessary git repository files in the project folder
  a local repo is created
  the files can then be added and committed to the local repo
  to put this repo under source control to a remote central server,
  
HOWTO: clone a remote repo into a local repo, using https
  $ git clone https://httpsCloneUrl
  this is useful if you just want to just get a copy of the project, and don't intend to make changes to be pushed
  if you want to push changes, this will use username/password

HOWTO: clone a remote repo into a local repo, using ssh
  $ git clone git://sshCloneUrl
  this can support ssh password-less authentication

HOWTO: list branches
  to list local branches, with * in front of checked-out branch
  $ git branch
  to also list remote branches that are not yet tracked
  $ git branch -a 

HOWTO: move between branches
  $ git checkout name_of_branch_that_you_want_to_move_to
  
HOWTO: create a local only branch
  this will make a branch that is a copy of the branch that is currently checked out
  $ git branch name_to_be_created
  this should yield a local-only branch, with no corresponding remote so it can be committed to but no push can happen
  
HOWTO: track file
  $ git add untracked_file # add is used to add a file to start being tracked
  $ git add already_tracked_but_just_modified_file # add is used to stage a tracked file
  $ git add file_to_be_added # adds just this file
  $ git add directory_to_be_added # recursively adds all files from this directory
  
  
HOWTO: use git short status
      In the short-format, the status of each path is shown as
           XY PATH1 -> PATH2
       where PATH1 is the path in the HEAD, and the " -> PATH2" part is shown only when PATH1 corresponds to a different path in the index/worktree (i.e. the file is renamed).
       The XY is a two-letter status code.
       The fields (including the ->) are separated from each other by a single space. If a filename contains whitespace or other nonprintable characters, that field will be
       quoted in the manner of a C string literal: surrounded by ASCII double quote (34) characters, and with interior special characters backslash-escaped.
       For paths with merge conflicts, X and Y show the modification states of each side of the merge. For paths that do not have merge conflicts, X shows the status of the
       index, and Y shows the status of the work tree. For untracked paths, XY are ??. Other status codes can be interpreted as follows:
       ·   ' ' = unmodified
       ·   M = modified
       ·   A = added
       ·   D = deleted
       ·   R = renamed
       ·   C = copied
       ·   U = updated but unmerged
       Ignored files are not listed, unless --ignored option is in effect, in which case XY are !!.
           X          Y     Meaning
           -------------------------------------------------
                     [MD]   not updated
           M        [ MD]   updated in index
           A        [ MD]   added to index
           D         [ M]   deleted from index
           R        [ MD]   renamed in index
           C        [ MD]   copied in index
           [MARC]           index and work tree matches
           [ MARC]     M    work tree changed since index
           [ MARC]     D    deleted in work tree
           -------------------------------------------------
           D           D    unmerged, both deleted
           A           U    unmerged, added by us
           U           D    unmerged, deleted by them
           U           A    unmerged, added by them
           D           U    unmerged, deleted by us
           A           A    unmerged, both added
           U           U    unmerged, both modified
           -------------------------------------------------
           ?           ?    untracked
           !           !    ignored
           -------------------------------------------------




$ git -s status # 2 letter status code shows indexstate workingTreeState
 M tracked_file_that_is_modified_but_not_yet_staged
MM file_that_was modified_and_staged_and_then_modified_again
A  new_file_that_is_being_staged_for_the_first_time
M  file_that_has_been_modified_since_the_last_stage_but_not_yet_staged_again
?? file_that_is_untracked


HOWOTO: list changed files between branches
  $ git --name-status branchA..branchB # show only names of files changed, and their status
  status is in the form of actions that need to happen to get branchA to become branchB
  $ git --stat branchA..branchB # show only names of files changed, and the no.of lines that changed
  $ git diff --staged # show differences in the files that are staged

HOWTO: replace a file with the HEAD version
  $ git checkout -- path_to_file_that_has_uncommited_changes_that_needs_to_be_replaced

HOWTO: checkout a commit by it's SHA-ID
 
HOWTO: know when to merge vs rebase 
 
HOWTO: use blame to track which commit a piece of code was introduced in

HOWTO: amend the last commit hat has not been pushed yet

HOWTO: squash multiple commits into a single commit

HOWTO: stash files temporarily

workingDirectory -> index(stage,tracked) -> remoteRepo
             git add                  git clone
             git rm                   git push
             git commit               git pull

 

"HEAD" -  is a reference to the current (most recent) commit
 
 
 git objects:
 - blob is used to store file data
 - tree can be thought of as a directory; it references other trees and blobs
 - commit a commit points to a single tree
 - tag marks a commit as special

ref is a variable that holds an identifier to a single git object.

https://gist.github.com/hofmannsven/6814451 (My simply Git Cheatsheet)